
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Copyright 2022 PapaAlan
// Copyright 2023 GM

// v 1.11 09/04/2022  Released version with open source code.  Streamlined code.  Now includes 
    // Incursion alerts:  Settings can be made such that when price goes into an existing FVG by a user defined percentage and alert can be caused.  See settings window for details.
    // Now supporting FVG timeframes of:  Current chart timeframe, 5min, 10min, 15min, 1hr,4hr,8hr,Daily,Weekly, Monthly.
    // FVG creation now of ICT method which waits for current candle close before forming fvg.
    // added support for 30 min timeframe fvg's
    
// v 1.12 10/03/2022 Fixed a bug that caused occasional duplicate FVG's to be created.
// v 1.13 1013/2022 Final Corrections, bug causing FVG creation alerts not to work.  Fixed.  Thanks to Kell81 for pointing it out.    
//@version=5
indicator(title='FVG MTF', shorttitle = 'FVG MTF', overlay=true, max_boxes_count = 500, max_labels_count = 500)
max_bars_back(time, 4999) 


// ------------------------------------ //
// |                TIPS              | //
// ------------------------------------ //
descTip1            = "FVG's commonly known as Fair Value Gaps are mostly in use for forex trading.  You can google the concept but it's very useful in price action trading, even on regular large cap stocks."
descTip2            = "Think of it as an imbalance area where it may actually be under/over valued due to many orders being injected in a short amount of time, ie . an impulse created by the speed of the movement."
descTip3            = "In essence, the FVG can become a kind of magnet drawing the price back to that level to attempt to balance out the orders (when? we don't know)."
descTip4            = "\n\nPlease do research to understand the concept of FVG's.  \n\nYou can look for an opportunity as price approaches the FVG for entry either long/short because after all, it is an 'Area of Interest'."
descTip5            = "\n\nNo indicator works 100% of the time so take in context as just another indicator. It tends work on larger time frames best. "

alertTip1           = "You can set an alert for when an FVG is created, (Bullish, Bearish or Both).  Another alert is provided for when the price moves inside the FVG (Bullish, Bearish or Both).  "
alertTip2           = "\n\nIMPORTANT NOTE: Due to the TradingView architecture, If you set an alert and then at some point go to the indicator settings and change the FVG timeframe boxes, the alert will still report on the old settings.  "
alertTip3           = "Before you set alerts up by right clicking on the chart and selecting etc., make sure you have all the settings you desire checkmarked in the indicator settings.  "
alertTip4           = "\n\nIf you do go back and change indicator settings, you should remove the old alert and create a new one!  "
alertTip5           = "\n\nWhy?  You ask?  When you create an alert, TV uploads the code for the indicator to their server and runs it there (not on your computer), so if you change the settings locally it doesn't get put up on their server for alerts until you create another alert."

mkthrsTip           = "Uncheck to show all FVG's created, (ie. market, postmarket, premarket"

fvgmethodTip        = "Body Method determines FVG's exist where you can see candle body element between candle 1 and candle 3 wicks, both up and down directions.\nWicks Method creates Bullish FVGs if candle 3 top wick is above candle 1 top wick and vice versa for Bearish."
showlabelTip        = "Displays Info On FVG Bands"

fvgcolorsTip        = "FVG Color Columns\nBullish  (current, 5min, 10min, 15min, 1hr, 4hr, 8hr, daily)\nBearish (current, 5min, 10min, 15min, 1hr, 4hr, 8hr, daily)"
mitigationS1        = "NORMAL: causes FVG to disappear when price has moved completely through the zone.\n"
mitigationS2        = "DYNAMIC: means the FVG zone will shrink when price moves into it eating up imbalance.\n"
mitigationS3        = "NONE: means FVG zones will not be deleted when filled.  Warning:  This option may show many FVG's, reduce the max number of enabled FVG's settings for less clutter.\n"
mitigationS4        = "HALF: means FVG zones will be deleted when price incursion into zone reaches half way point."
mitiactionTip1      = mitigationS1 + mitigationS2 + mitigationS3 + mitigationS4
mitiactionTip2      = "Only for above NONE option.  This is the fill color of all mitigated FVG's that have occurred."
mitiactionTip3      = "If 'None' option of mitigation is selected and Display FVG Labels is enabled, show mitigation text inside FVG"
mititypeTip         = "When either when Wick or Body of candle moves above/below the complete Fair Value Gap band, it will be mitigated."
entrychgclrTip      = "As price enters any FVG, change the band color to user set colors"
ndtTip              = "Causes indicator to NOT remove bands for daily FVGs"
timezoneTip         = "For Labels, Enter your time zone's offset (+ or −) from UTC, example: New York = -5, for those in the U.S. take into account daylight savings time etc."//, including a decimal fraction if needed."
incursionTip1       = "Incursion means the price enters an FVG area (band).  This type of alert MUST have Mitigation Action set to NORMAL OR NONE.\n\n"
incursionTip2       = "Before setting any alert for this, make sure you select the amount (percentage) of penetration of the price into the FVG band that you desire.\n\n"
incursionTip3       = "Incursion alerts are unique so be sure you go to the chart settings and select to set Add an Alert and this indicator name in the Condition Box. Then select Any alert() function call and press the Create button. "
incursionTip        = incursionTip1+incursionTip2+incursionTip3
grp_tfs_enabled     = "ENABLED TIME FRAMES"
tfcstrg             = "FVG Time Frame Fill Colors"

inSession           = not na(time(timeframe.period, "0900-1800"))

hover1                      = input.bool(true,"Info about FVG's",group = "IMPORTANT INFORMATION",tooltip = descTip1+descTip2+descTip3+descTip4+descTip5, inline = "1")
hover2                      = input.bool(true,"Alerts usage",group = "IMPORTANT INFORMATION",tooltip = alertTip1+alertTip2+alertTip3+alertTip4+alertTip5, inline = "1")
short_mode_fvg              = input.bool(true, "Short mode", inline="bar_offset")
input_start_fvg             = input.int(8, "Bar start", -9999999999, 9999999999, 1, inline="bar_offset")
input_end_fvg               = input.int(15, "Bar end", -9999999999, 9999999999, 1, inline="bar_offset")
OnlyMktHrs                  = input.bool(false,"Show Only FVG's Created During Market Hours",tooltip = mkthrsTip)

// SET DEFAULT COLORS FOR ALL TIMEFRAMES
bullfvgcolor                = input.color(color.new(#0026ff, 81),"Bull",group = tfcstrg, inline="0") //"    "
bearfvgcolor                = input.color(color.new(#ffa200, 80),"Bear",group = tfcstrg, inline="0")
fmthds                      = input.string("Wick", "Detection by", options = ["Body","Wick"], group = tfcstrg, tooltip = fvgmethodTip, inline="0")
fvgmethod                   = fmthds == "Body" ? true : false
extendOption                = input.string("none", title="Extend", options=["none", "left", "right", "both"], group = tfcstrg, inline="0")
lineExtend = extendOption == "left" ? extend.left :
 extendOption == "right" ? extend.right :
 extendOption == "both" ? extend.both :
 extend.none

// FVG Box Border Inputs
box_border_bull_color       = input.color(color.new(#3352ff, 0),"Bull",group = 'FVG BOX BORDER SETTINGS', inline='1')
box_border_bear_color       = input.color(color.new(#ff9900, 10),"Bear",group = 'FVG BOX BORDER SETTINGS', inline='1')
box_border_width_lower      = input.int(1,"Lower TF Width",minval = 0, maxval = 5,group = 'FVG BOX BORDER SETTINGS', inline='1')
box_border_width_higher     = input.int(3,"Higher TF Width",minval = 0, maxval = 5,group = 'FVG BOX BORDER SETTINGS', inline='1')
bbstyle_string              = input.string("Dashed","Style",options = ["Dotted","Dashed","Solid"],group = 'FVG BOX BORDER SETTINGS', inline='1')
box_border_style            = bbstyle_string == 'Dotted' ? line.style_dotted : bbstyle_string == 'Dashed' ? line.style_dashed : line.style_solid

show_labels                 = input.bool(true,"Enable",group = "Labels", inline="labels",tooltip = showlabelTip)
labelcolorbear              = input.color(color.new(#ff9900, 10),"",group = "Labels", inline="labels")
labelcolorbull              = input.color(color.new(#3352ff, 0),"",group = "Labels", inline="labels")
label_alpha                 = input(100, title = "Transparency", group = "Labels", inline="labels")
label_size_opt              = input.string(title="Size", options=["Auto", "Huge", "Large", "Normal", "Small", "Tiny"], group = "Labels", defval="Small", inline="labels")
label_shift                 = input.int(0,"Offset",tooltip="Number of bars to the right of latest bar do you want to display FVG labels.", group = "Labels", inline="labels")
label_size           = (label_size_opt == "Huge") ? size.huge :
     (label_size_opt == "Large") ? size.large :
     (label_size_opt == "Small") ? size.small :
     (label_size_opt == "Tiny") ? size.tiny :
     (label_size_opt == "Auto") ? size.auto :
         size.normal
label_position              = input.string("Close to price", options = ["Close to price", "Far from price"],group = "Labels", inline="labels2")
show_timeonlabels           = input.bool(false,'Show Creation Time',group = "Labels", inline="labels2")         
hoursOffsetInput            = input.float(-3.0, "Timezone offset (in hours)", minval = -12.0, maxval = 14.0, step = 0.5, group = "Labels", tooltip = timezoneTip, inline="labels2")
var msOffsetInput           = hoursOffsetInput * 1000 * 60 * 60

mitiaction                  = input.string("Dynamic","Mitigation Action",options = ["Normal","Dynamic","None","Half"],group = 'FVG Mitigation Settings', inline='mitigation',tooltip = mitiactionTip1)
mitigationaction            = mitiaction == 'Normal'? 1 : mitiaction == 'Dynamic' ? 2 : mitiaction == 'None' ? 3 : 4

mitig_type                  = input.string("Wicks","Mitigation Type",options = ["Wicks","Body"],group = 'FVG Mitigation Settings', inline='mitigation',tooltip = mititypeTip)
UseBodyForMitigation        = mitig_type == "Body" ? true : false

nomiticolor                 = input.color(defval=color.new(color.yellow,85),title="Mitigated FVG Color For 'None' Option",group = 'FVG Mitigation Settings', inline="1",tooltip = mitiactionTip2)
nmc_trans                   = color.t(nomiticolor)
show_mitigated_text         = input.bool(true,'Show Mitigated Text',group = 'FVG Mitigation Settings', inline="1",tooltip = mitiactionTip3)
entrychangecolor            = input.bool(false,"Change FVG Color On Entry  ",group = 'FVG Mitigation Settings', inline='3',tooltip = entrychgclrTip)
entry_bull_color            = input.color(color.new(color.yellow,90),"Bull",group = 'FVG Mitigation Settings', inline='3')
entry_bear_color            = input.color(color.new(color.blue,90),"Bear",group = 'FVG Mitigation Settings', inline='3')

// ============================================ //
// FVG Supported Timeframe strings used for labels and alertcondition at end
// ============================================ //
maxgroup                    = "MAX FVGs SETTINGS (COMBINED MAXIMUM MUST BE LESS THAN 500)"   
enable_current_timeframe    = input.bool(false,"Chart",group = grp_tfs_enabled, inline="line1")
curr_MaxArraySize           = input.int(20,"",group = grp_tfs_enabled, inline="line1",minval = 1)

enable_5min                 = input.bool(false,"5 min",group = grp_tfs_enabled, inline="line2")
MaxArraySize_5min           = input.int(20,"",group = grp_tfs_enabled, inline="line2",minval = 1)

enable_10min                = input.bool(false,"10 min",group = grp_tfs_enabled, inline="line3")
MaxArraySize_10min          = input.int(20,"",group = grp_tfs_enabled, inline="line3",minval = 1)

enable_15min                = input.bool(true,"15 min",group = grp_tfs_enabled, inline="line4")
MaxArraySize_15min          = input.int(20,"",group = grp_tfs_enabled, inline="line4",minval = 1)

enable_30min                = input.bool(true,"30 min",group = grp_tfs_enabled, inline="line5")
MaxArraySize_30min          = input.int(20,"",group = grp_tfs_enabled, inline="line5",minval = 1)

enable_1hr                  = input.bool(true,"1 Hour",group = grp_tfs_enabled, inline="line6")
MaxArraySize_1hr            = input.int(60,"",group = grp_tfs_enabled, inline="line6",minval = 1)

enable_4hr                  = input.bool(true,"4 Hour",group = grp_tfs_enabled, inline="line1")
MaxArraySize_4hr            = input.int(60,"",group = grp_tfs_enabled, inline="line1",minval = 1)

enable_8hr                  = input.bool(false,"8 Hour",group = grp_tfs_enabled, inline="line2")
MaxArraySize_8hr            = input.int(60,"",group = grp_tfs_enabled, inline="line2",minval = 1)

enable_Daily                = input.bool(true,"Daily",group = grp_tfs_enabled, inline="line3")
MaxArraySize_Daily          = input.int(60,"",group = grp_tfs_enabled, inline="line3",minval = 1)

enable_Week                 = input.bool(true,"Weekly",group = grp_tfs_enabled, inline="line4")
MaxArraySize_Wkly           = input.int(60,"",group = grp_tfs_enabled, inline="line4",minval = 1)

enable_Month                = input.bool(true,"Monthly",group = grp_tfs_enabled, inline="line5")
MaxArraySize_Mthly          = input.int(60,"",group = grp_tfs_enabled, inline="line5",minval = 1)

is_intraday = false
current_timeframe = timeframe.period
var timestring = ""
if timeframe.isintraday
    if str.tonumber(current_timeframe) > 59
        timestring := str.tostring(str.tonumber(current_timeframe) / 60) + "h" 
    else
        timestring := current_timeframe + "m"
else if timeframe.isdaily
    timestring := "D"
else if timeframe.isweekly
    timestring := "W"
else
    timestring := "M"
currtfstring        = timestring

//Create error box template (as table) if user entered over 500 fvgs total
var table ErrorBox  = table.new(position.bottom_right, 1, 1, frame_color=color.red,frame_width = 1)
tot_user_max_boxes  = curr_MaxArraySize + MaxArraySize_5min + MaxArraySize_10min + MaxArraySize_15min + MaxArraySize_1hr + MaxArraySize_4hr + MaxArraySize_8hr + MaxArraySize_Daily + MaxArraySize_Wkly + MaxArraySize_Mthly
isError             = tot_user_max_boxes > 500
if isError
    table.cell(ErrorBox, 0, 0, "MTF FVG INDICATOR ERROR\n\n"+"Max Number of FVGs exceeded, please change settings.", bgcolor = color.new(color.blue, 50), 
     text_color = color.red,text_halign=text.align_center)
    bgcolor=color.new(color.maroon,90)

incursion_alerts    = input.bool(false,'Enable Incursion Alerts',group = 'FVG Incursion Alerts', inline='0',tooltip=incursionTip)
incursion_pct       = input.int(defval=20,title='Incursion Percentage',group = 'FVG Incursion Alerts', inline='0',tooltip='Percentage of price intrusion into FVG before alert')
intrusion_percentage= incursion_pct / 100

// --------------------------------------------------------------- //
// |    FUNCTIONS|                                                 //
// --------------------------------------------------------------- //
// simple strings required for request.security function in latter main code calls to handle_all function
_gettf_interval_str(simple int index) =>
    string result = switch index
        0 => "5"
        1 => "10"
        2 => "15"
        3 => "30"
        4 => "60"
        5 => "240"
        6 => "480"
        7 => "D"
        8 => "W"
        9 => "M"
        => "Unsupported Timeframe"

// simple strings require for label displays used in add_label ultimately
_gettf_label_str(simple int index) =>
    string result = switch index
        0 => "5m"
        1 => "10m"
        2 => "15m"
        3 => "30m"
        4 => "1h"
        5 => "4h"
        6 => "8h"
        7 => "D"
        8 => "W"
        9 => "M"
        => "Unsupported Timeframe"

// used if user selected use chart timeframe option to see not double work if chart is set to same timeframe as another enabled timeframe for fvg creation        
_not_current_timeframe_equal_enabled_tfs(_current_timeframe) =>
    result = switch _current_timeframe
        "5"     => not enable_5min
        "10"    => not enable_10min
        "15"    => not enable_15min
        "30"    => not enable_30min
        "60"    => not enable_1hr
        "240"   => not enable_4hr
        "480"   => not enable_8hr
        "D"     => not enable_Daily
        "W"     => not enable_Week
        "M"     => not enable_Month
        => true

// ************* SEE IF NEW BULL FVGs DETECTED   
_isfvgbull(_fvgmethod, _low, _high2, _close1, _open1) => 
    if _fvgmethod  // if body fvg detection
        _low > _high2 and _low <= _close1 and _high2 > _open1 
    else   // else wick detection
        _high2 < _low 

// ************* SEE IF NEW BEAR FVGs DETECTED     
_isfvgbear(_fvgmethod, _low2, _high, _close1, _open1) =>
    if _fvgmethod
        _low2 > _high and _high >= _close1 and _low2 <= _open1
    else
        _low2 > _high

// *************** DELETE A BOX AND ASSOCIATED LABEL        
_box_n_label_delete(_boxarray, _i, _labelarray, _labelflag) =>
    bptr = array.get(_boxarray, _i)
    box.delete(bptr)
    array.remove(_boxarray, _i)
    if _labelflag
        lptr = array.get(_labelarray, _i)
        label.delete(lptr)
        array.remove(_labelarray, _i)

// *************** GET A FVG BOX TOP AND BOTTOM VALUES
_getboxelements(_boxptr, _i) =>
    _boxelement = array.get(_boxptr, _i)
    _left       = box.get_left(_boxelement)
    _top        = box.get_top(_boxelement)
    _btm        = box.get_bottom(_boxelement)
    _right      = box.get_right(_boxelement)
    [_boxelement, _left, _top, _btm, _right]
    
// ************** GET LEFT SIDE START BAR INDEX OF EXISTING BOX, for use in preventing duplicates for higher timeframes
_getboxstart(_boxptr, _i) =>
    _boxelement = array.get(_boxptr, _i)

// *************** ADD A LABEL TO AN FVG    
_addlabel(_fvglabelsarray, _bar_index, _high, _string, _color, _style, y, _show_label) =>
    var string s = na
    if _show_label
        if show_timeonlabels
            s := _string + str.format("  {0,date,HH:mm MM/dd/yy}", time + msOffsetInput)
        else 
            s := _string
        blabel = label.new(_bar_index, _high, text=s, color=color.rgb(0,0,0, label_alpha), textcolor = color.new(_color, 10), yloc = yloc.price, style = _style) //_string,color=color.rgb(0,0,0,100),style = _style)
        label.set_textcolor(blabel,color.new(_color, 10))//color.rgb(label_red,label_grn,label_blu,label_trans))
        //label.set_xy(blabel, _bar_index + label_shift,y)
        label.set_xy(blabel, _bar_index, y)
        label.set_size(blabel, size.normal)
        array.push(_fvglabelsarray,blabel)

// added these two globally as can't use them in functions with consistency/reliability towards incursion alerts       
lasthigh    = high[1]    
lastlow     = low[1]

// compare existing bull fvg box values to current price action
_getbullfvgaction(_top, _bottom, _intrusion_percentage) =>
    midpt = (_top + _bottom) / 2
    threshold   = _top - (_intrusion_percentage * (_top - _bottom))
    _have_intrusion = low < threshold and lastlow > threshold    
    _lowundertop    = low < _top
    _lowunderbtm    = low < _bottom
    _lowundermid    = low < midpt
    _closeundertop  = close < _top
    _closeunderbtm  = close < _bottom
    _closeundermid  = low < midpt
    [_lowundertop, _lowunderbtm, _closeundertop, _closeunderbtm, _lowundermid, _closeundermid, _have_intrusion]//, _closecrosswithin]

// compare existing bear fvg box values to current price action   
_getbearfvgaction(_top, _bottom, _intrusion_percentage) =>
    midpt = (_top + _bottom) / 2
    threshold   = _bottom + (_intrusion_percentage * (_top - _bottom))
    _have_intrusion = high > threshold and lasthigh < threshold    
    _highovertop    = high > _top
    _highoverbtm    = high > _bottom
    _highovermid    = high > midpt
    _closeovertop   = close > _top
    _closeoverbtm   = close > _bottom
    _closeovermid   = close > midpt
    [_highovertop, _highoverbtm, _closeovertop, _closeoverbtm, _highovermid, _closeovermid, _have_intrusion]

// used for adjusting fvg label position with each new bar
_updateLabel(_fvglabels, _i, _barindex, p_top, p_bottom, p_zonetype) =>
    if barstate.islast   
        labelid = array.get(_fvglabels, _i)
        float position = 0
        if label_position == "Close to price"
            position := p_zonetype == "sup" ? p_top : p_bottom
        else
            position := p_zonetype == "sup" ? p_bottom : p_top  
        label.set_xy(labelid, _barindex + label_shift, position)

// get higher timeframe price values
_gethighlowcloseopens(_ticker, _period, _high, _high2, _low, _low2, _close1, _open1) =>
    request.security(_ticker, _period,[_high, _high2, _low, _low2, _close1, _open1])    

// modify existing bull fvg boxes for incursion, deletion etc.
_update_bull_fvgs(_boxbull, _labelsbull, _timestring) =>
    for i = array.size(_boxbull) - 1 to 0 by 1
        [fvgboxbull,left,top,bottom,right] = _getboxelements(_boxbull,i)
        [lowundertop,lowunderbtm,closeundertop,closeunderbtm,lowundermid,closeundermid,intrusion] = _getbullfvgaction(top,bottom,intrusion_percentage)

        // INCURSION ALERT DONE HERE: if mitigation action is normal or none then do alert
        if (mitigationaction == 1 or mitigationaction == 3) and intrusion and incursion_alerts
            alert("Bull FVG Incursion " + str.tostring(_timestring), alert.freq_once_per_bar)

        if entrychangecolor
            if lowundertop  // low < top   
                box.set_bgcolor(fvgboxbull,entry_bull_color)

        if show_labels     
            _updateLabel(_labelsbull, i, bar_index + input_end_fvg, top, bottom, "sup")
        
        // *** if mitigation is set to dynamic and body is referenced with price and price is within fvg
        if mitigationaction == 2 and UseBodyForMitigation and closeundertop 
            box.set_top(fvgboxbull,close)
            if show_labels
                _updateLabel(_labelsbull,i,bar_index + input_end_fvg, top, bottom, "sup")                
        else
        // else if mitigation set to dynamic and body mitigation NOT enabled and btm wick goes below top of fvg band then move band top lower            
            if mitigationaction == 2 and lowundertop 
                box.set_top(fvgboxbull,low)
                if show_labels
                    _updateLabel(_labelsbull, i, bar_index + input_end_fvg, top, bottom, "sup")
        
        // section to delete boxes when fvg filled
        if mitigationaction == 3 // if 'none' selected for mitigation
            if UseBodyForMitigation and closeunderbtm
                box.set_bgcolor(fvgboxbull,color.new(nomiticolor,nmc_trans))
            else
                if lowunderbtm 
                    box.set_bgcolor(fvgboxbull,color.new(nomiticolor,nmc_trans)) 
                    
            if (UseBodyForMitigation and closeunderbtm) or lowunderbtm
                if show_labels and show_mitigated_text
                    larray = array.get(_labelsbull,i)
                    curr_text = label.get_text(larray)
                    found = str.contains(curr_text,"Mitigated")                    
                    if not found
                        label.set_text(larray,curr_text + " Mitigated")                     
        
        if mitigationaction == 1 or mitigationaction == 2
            if UseBodyForMitigation and closeunderbtm
                _box_n_label_delete(_boxbull, i, _labelsbull, show_labels)            
            else
                if lowunderbtm 
                    _box_n_label_delete(_boxbull, i, _labelsbull, show_labels) 
                    
        if mitigationaction == 4 // if half mitigation
            if UseBodyForMitigation and closeundermid
                _box_n_label_delete(_boxbull, i, _labelsbull, show_labels)             
            else
                if lowundermid 
                    _box_n_label_delete(_boxbull, i, _labelsbull, show_labels) 

// modify existing bear fvg boxes for incursion, deletion etc.
_update_bear_fvgs(_boxbear, _labelsbear, _timestring) =>                
    for i = array.size(_boxbear) - 1 to 0 by 1
        [fvgboxbear,left,top,bottom,right] = _getboxelements(_boxbear,i)
        [highovertop,highoverbtm,closeovertop,closeoverbtm,highovermid,closeovermid,intrusion] = _getbearfvgaction(top,bottom,intrusion_percentage)         

        // INCURSION ALERT DONE HERE: if mitigation action is normal or none then do alert
        if (mitigationaction == 1 or mitigationaction == 3) and intrusion and incursion_alerts
            alert("Bear FVG Incursion " + str.tostring(_timestring), alert.freq_once_per_bar)

        if entrychangecolor
            if highoverbtm   
                box.set_bgcolor(fvgboxbear,entry_bear_color)//color.new(bearfvgcolor, _bear_trans - (_bear_trans / 4)))

        if show_labels 
            _updateLabel(_labelsbear,i,bar_index + input_end_fvg, top, bottom, "res")            

        // *** if mitigation is set to dynamic and body is referenced with price and price is within fvg
        if mitigationaction == 2 and UseBodyForMitigation and closeoverbtm  
            box.set_bottom(fvgboxbear,close) 
            if show_labels
                _updateLabel(_labelsbear,i,bar_index + input_end_fvg, top, bottom, "res")                  
        else
        // else if mitigation set to dynamic and body mitigation NOT enabled and top wick goes above bottom of fvg band then move band bottom up            
            if mitigationaction == 2 and highoverbtm 
                box.set_bottom(fvgboxbear,high)
                if show_labels
                    _updateLabel(_labelsbear,i,bar_index + input_end_fvg, top, bottom, "res")  
                    
        if mitigationaction == 3 // if 'none' selected for mitigation
            if UseBodyForMitigation and closeovertop
                box.set_bgcolor(fvgboxbear,color.new(nomiticolor,nmc_trans))
            else
                if highovertop
                    box.set_bgcolor(fvgboxbear,color.new(nomiticolor,nmc_trans))  
            
            if (UseBodyForMitigation and closeovertop) or highovertop
                if show_labels and show_mitigated_text
                    larray = array.get(_labelsbear,i)
                    curr_text = label.get_text(larray)
                    found = str.contains(curr_text,"Mitigated")                    
                    if not found
                        label.set_text(larray,curr_text + " Mitigated")                    
        
        if mitigationaction == 1 or mitigationaction == 2
            if UseBodyForMitigation and closeovertop 
                _box_n_label_delete(_boxbear, i, _labelsbear, show_labels)              
            else
                if highovertop 
                    _box_n_label_delete(_boxbear, i, _labelsbear, show_labels) 

        if mitigationaction == 4 // if half mitigation
            if UseBodyForMitigation and closeovermid
                _box_n_label_delete(_boxbear, i, _labelsbear, show_labels)             
            else
                if highovermid 
                    _box_n_label_delete(_boxbear, i, _labelsbear, show_labels)                 

// check for duplicate boxes required for eliminating duplicate higher timeframe fvg boxes, input 1: pointer to box array, input 2: bar_index which is left side of box in bar_index number
_duplicate_box(_boxarray, _top, _bottom) =>
    found = false
    if array.size(_boxarray) > 0
        for i = array.size(_boxarray) - 1 to 0 by 1       
            [_barray,left,top,bottom,right] = _getboxelements(_boxarray,i) 
            if _top == top //and _bottom == bottom  //_left_bar_index == left
                found := true
                break
    found
    

// main function call here - detects and calls to create fvg boxes then calls the update fvg functions for bulls and bears fvgs for already existing fvg boxes
_handle_all(_tstring, _bullfvgs, _bearfvgs, _bulllabels, _bearlabels, _maxarraysize, _high, _highback2, _low, _lowback2, _closeback1, _openback1) =>
    var bool _newBull = false
    var bool _newBear = false
    if OnlyMktHrs and inSession or not OnlyMktHrs
        _newBull := _isfvgbull(fvgmethod, _low, _highback2, _closeback1, _openback1) 
        _newBear := _isfvgbear(fvgmethod, _lowback2, _high, _closeback1, _openback1) 
    
    if _newBull
        if array.size(_bullfvgs) > _maxarraysize
            _box_n_label_delete(_bullfvgs, 0, _bulllabels, show_labels)   

        if not _duplicate_box(_bullfvgs, _low, _highback2)  // inputs top, bottom of box
            //tempo_htf = time[bar_index[2]]
            //tempo_atual = (time - tempo_htf) / (1000 * timeframe.in_seconds(_tstring))
            //int barra_atual = getBarIndexAtTime(tempo_atual)
            array.push(_bullfvgs, box.new(left=bar_index[2], bottom=_highback2, right=bar_index, top=_low, bgcolor=bullfvgcolor, border_color=box_border_bull_color, border_width = is_intraday ? box_border_width_lower : box_border_width_higher, border_style = box_border_style,extend=lineExtend))
            if show_labels
                _addlabel(_bulllabels, bar_index, _high, _tstring, labelcolorbull, label.style_label_left, _high[2], show_labels)

    if _newBear
        if array.size(_bearfvgs) > _maxarraysize
            _box_n_label_delete(_bearfvgs, 0, _bearlabels, show_labels)          
    
        if not _duplicate_box(_bearfvgs, _lowback2, _high)  // inputs top, bottom of box
            array.push(_bearfvgs, box.new(left=bar_index[2], top=_lowback2, right=bar_index, bottom=_high, bgcolor=bearfvgcolor, border_color=box_border_bear_color, border_width = is_intraday ? box_border_width_lower : box_border_width_higher, border_style = box_border_style,extend=lineExtend))
            if show_labels
                _addlabel(_bearlabels,bar_index, _high, _tstring, labelcolorbear, label.style_label_left, _low, show_labels)

    //|       BULL FVG HANDLING AREA         | //
    // ----------------------------------------------- //
    if array.size(_bullfvgs) > 0  // this code is to handle incursion alerts before FVG's possibly being mitigated
        _update_bull_fvgs(_bullfvgs, _bulllabels, _tstring) 
    
    // ----------------------------------------------- //
    // |        BEAR FVG HANDLING AREA         | //
    // ----------------------------------------------- //
    if array.size(_bearfvgs) > 0  // this code is to handle incursion alerts before FVG's possibly being mitigated
        _update_bear_fvgs(_bearfvgs, _bearlabels, _tstring)                 

    [_newBull, _newBear]

f_updateBox(array<box> _boxes) =>
    for [index, _box] in _boxes
        if (short_mode_fvg)
            int x1 = box.get_left(_box)
            int x2 = box.get_right(_box)
            int size = x2 - x1
            box.set_left(_box, bar_index + input_start_fvg)
            box.set_right(_box, bar_index + input_end_fvg)
        else       
            box.set_right(_box, bar_index)

// ***************************************************
// Array and Box definition area
// ***************************************************
var box[]   fvgboxBull      = array.new_box()
var box[]   fvgboxBear      = array.new_box()
var         fvglabelsBull   = array.new_label()
var         fvglabelsBear   = array.new_label()
var bool    newboxBull      = false
var bool    newboxBear      = false

var box[]   fvgboxBull5     = array.new_box()
var box[]   fvgboxBear5     = array.new_box()
var         fvglabelsBull5  = array.new_label()
var         fvglabelsBear5  = array.new_label()
var bool    newboxBull5     = false
var bool    newboxBear5     = false

var box[]   fvgboxBull10    = array.new_box()
var box[]   fvgboxBear10    = array.new_box()
var         fvglabelsBull10 = array.new_label()
var         fvglabelsBear10 = array.new_label()
var bool    newboxBull10    = false
var bool    newboxBear10    = false

var box[]   fvgboxBull15    = array.new_box()
var box[]   fvgboxBear15    = array.new_box()
var         fvglabelsBull15 = array.new_label()
var         fvglabelsBear15 = array.new_label()
var bool    newboxBull15    = false
var bool    newboxBear15    = false

var box[]   fvgboxBull30    = array.new_box()
var box[]   fvgboxBear30    = array.new_box()
var         fvglabelsBull30 = array.new_label()
var         fvglabelsBear30 = array.new_label()
var bool    newboxBull30    = false
var bool    newboxBear30    = false

var box[]   fvgboxBull1hr   = array.new_box()
var box[]   fvgboxBear1hr   = array.new_box()
var         fvglabelsBull1hr= array.new_label()
var         fvglabelsBear1hr= array.new_label()
var bool    newboxBull1hr   = false
var bool    newboxBear1hr   = false

var box[]   fvgboxBull4hr   = array.new_box()
var box[]   fvgboxBear4hr   = array.new_box()
var         fvglabelsBull4hr= array.new_label()
var         fvglabelsBear4hr= array.new_label()
var bool    newboxBull4hr   = false
var bool    newboxBear4hr   = false

var box[]   fvgboxBull8hr   = array.new_box()
var box[]   fvgboxBear8hr   = array.new_box()
var bool    newboxBull8hr   = false
var bool    newboxBear8hr   = false
var         fvglabelsBull8hr= array.new_label()
var         fvglabelsBear8hr= array.new_label()

var box[]   fvgboxBullDaily = array.new_box()
var box[]   fvgboxBearDaily = array.new_box()
var         fvglabelsBullDaily = array.new_label()
var         fvglabelsBearDaily = array.new_label()
var bool    newboxBullDaily = false
var bool    newboxBearDaily = false

var box[]   fvgboxBullWeekly = array.new_box()
var box[]   fvgboxBearWeekly = array.new_box()
var         fvglabelsBullWeekly = array.new_label()
var         fvglabelsBearWeekly = array.new_label()
var bool    newboxBullWeekly = false
var bool    newboxBearWeekly = false

var box[]   fvgboxBullMonthly = array.new_box()
var box[]   fvgboxBearMonthly = array.new_box()
var         fvglabelsBullMonthly = array.new_label()
var         fvglabelsBearMonthly = array.new_label()
var bool    newboxBullMonthly = false
var bool    newboxBearMonthly = false


///////////////////////////////////////
//|        MAIN CODE                  |
///////////////////////////////////////
current_bar = bar_index
if enable_current_timeframe and _not_current_timeframe_equal_enabled_tfs(current_timeframe)
    is_intraday := true
    [_high,highback2, _low,lowback2,closeback1,openback1] = _gethighlowcloseopens(syminfo.tickerid,current_timeframe,high[1],high[3],low[1],low[3],close[2],open[2])
    [tnewboxBull,tnewboxBear] = _handle_all(currtfstring,fvgboxBull,fvgboxBear,fvglabelsBull,fvglabelsBear,curr_MaxArraySize, _high,highback2, _low,lowback2,closeback1,openback1)
    newboxBull := tnewboxBull
    newboxBear := tnewboxBear

if enable_5min
    is_intraday := true
    [_high,highback2, _low,lowback2,closeback1,openback1] = _gethighlowcloseopens(syminfo.tickerid, _gettf_interval_str(0),high[1],high[3],low[1],low[3],close[2],open[2])
    [tnewboxBull5,tnewboxBear5] =_handle_all(_gettf_label_str(0),fvgboxBull5,fvgboxBear5,fvglabelsBull5,fvglabelsBear5,MaxArraySize_5min, _high,highback2, _low,lowback2,closeback1,openback1)
    newboxBull5 := tnewboxBull5
    newboxBear5 := tnewboxBear5

if enable_10min
    is_intraday := true
    [_high,highback2, _low,lowback2,closeback1,openback1] = _gethighlowcloseopens(syminfo.tickerid, _gettf_interval_str(1),high[1],high[3],low[1],low[3],close[2],open[2])
    [tnewboxBull10,tnewboxBear10] = _handle_all(_gettf_label_str(1),fvgboxBull10,fvgboxBear10,fvglabelsBull10,fvglabelsBear10,MaxArraySize_10min, _high,highback2, _low,lowback2,closeback1,openback1)
    newboxBull10 := tnewboxBull10
    newboxBear10 := tnewboxBear10

if enable_15min
    is_intraday := true
    [_high,highback2, _low,lowback2,closeback1,openback1] = _gethighlowcloseopens(syminfo.tickerid, _gettf_interval_str(2),high[1],high[3],low[1],low[3],close[2],open[2])
    [tnewboxBull15,tnewboxBear15] = _handle_all(_gettf_label_str(2),fvgboxBull15,fvgboxBear15,fvglabelsBull15,fvglabelsBear15,MaxArraySize_15min, _high,highback2, _low,lowback2,closeback1,openback1)            
    newboxBull15 := tnewboxBull15
    newboxBear15 := tnewboxBear15

if enable_30min
    is_intraday := true
    [_high,highback2, _low,lowback2,closeback1,openback1] = _gethighlowcloseopens(syminfo.tickerid, _gettf_interval_str(3),high[1],high[3],low[1],low[3],close[2],open[2])
    [tnewboxBull30,tnewboxBear30] = _handle_all(_gettf_label_str(3),fvgboxBull30,fvgboxBear30,fvglabelsBull30,fvglabelsBear30,MaxArraySize_30min, _high,highback2, _low,lowback2,closeback1,openback1)            
    newboxBull30 := tnewboxBull30
    newboxBear30 := tnewboxBear30

if enable_1hr
    is_intraday := true
    [_high,highback2, _low,lowback2,closeback1,openback1] = _gethighlowcloseopens(syminfo.tickerid, _gettf_interval_str(4),high[1],high[3],low[1],low[3],close[2],open[2])
    [tnewboxBull1hr,tnewboxBear1hr] = _handle_all(_gettf_label_str(4),fvgboxBull1hr,fvgboxBear1hr,fvglabelsBull1hr,fvglabelsBear1hr,MaxArraySize_1hr, _high,highback2, _low,lowback2,closeback1,openback1)            
    newboxBull1hr := tnewboxBull1hr
    newboxBear1hr := tnewboxBear1hr

if enable_4hr
    is_intraday := true
    [_high,highback2, _low,lowback2,closeback1,openback1] = _gethighlowcloseopens(syminfo.tickerid, _gettf_interval_str(5),high[1],high[3],low[1],low[3],close[2],open[2])
    [tnewboxBull4hr,tnewboxBear4hr] = _handle_all(_gettf_label_str(5),fvgboxBull4hr,fvgboxBear4hr,fvglabelsBull4hr,fvglabelsBear4hr,MaxArraySize_4hr, _high,highback2, _low,lowback2,closeback1,openback1)            
    newboxBull4hr := tnewboxBull4hr
    newboxBear4hr := tnewboxBear4hr

if enable_8hr
    is_intraday := true
    [_high,highback2, _low,lowback2,closeback1,openback1] = _gethighlowcloseopens(syminfo.tickerid, _gettf_interval_str(6),high[1],high[3],low[1],low[3],close[2],open[2])
    [tnewboxBull8hr,tnewboxBear8hr] = _handle_all(_gettf_label_str(6),fvgboxBull8hr,fvgboxBear8hr,fvglabelsBull8hr,fvglabelsBear8hr,MaxArraySize_8hr, _high,highback2, _low,lowback2,closeback1,openback1) 
    newboxBull8hr := tnewboxBull8hr
    newboxBear8hr := tnewboxBear8hr

if enable_Daily 
    is_intraday := false
    [_high,highback2, _low,lowback2,closeback1,openback1] = _gethighlowcloseopens(syminfo.tickerid, _gettf_interval_str(7),high[1],high[3],low[1],low[3],close[2],open[2])
    [tnewboxBullDaily,tnewboxBearDaily] = _handle_all(_gettf_label_str(7),fvgboxBullDaily,fvgboxBearDaily,fvglabelsBullDaily,fvglabelsBearDaily,MaxArraySize_Daily, _high,highback2, _low,lowback2,closeback1,openback1)
    newboxBullDaily := tnewboxBullDaily
    newboxBearDaily := tnewboxBearDaily

if enable_Week
    is_intraday := false
    [_high,highback2, _low,lowback2,closeback1,openback1] = _gethighlowcloseopens(syminfo.tickerid, _gettf_interval_str(8),high[1],high[3],low[1],low[3],close[2],open[2])
    [tnewboxBullWeekly,tnewboxBearWeekly] = _handle_all(_gettf_label_str(8),fvgboxBullWeekly,fvgboxBearWeekly,fvglabelsBullWeekly,fvglabelsBearWeekly,MaxArraySize_Wkly, _high,highback2, _low,lowback2,closeback1,openback1)    
    newboxBullWeekly := tnewboxBullWeekly
    newboxBearWeekly := tnewboxBearWeekly

if enable_Month
    is_intraday := false
    [_high,highback2, _low,lowback2,closeback1,openback1] = _gethighlowcloseopens(syminfo.tickerid, _gettf_interval_str(9),high[1],high[3],low[1],low[3],close[2],open[2])
    [tnewboxBullMonthly,tnewboxBearMonthly] = _handle_all(_gettf_label_str(9),fvgboxBullMonthly,fvgboxBearMonthly,fvglabelsBullMonthly,fvglabelsBearMonthly,MaxArraySize_Mthly, _high,highback2, _low,lowback2,closeback1,openback1)
    newboxBullMonthly := tnewboxBullMonthly
    newboxBearMonthly := tnewboxBearMonthly
    
// // ------------------------------------------------------- //
// // |            STANDARD CONDITIONAL ALERT SECTION         | //
// // ------------------------------------------------------- // 

bull_fvg_creation_alert = newboxBull or newboxBull5 or newboxBull10 or newboxBull15 or newboxBull1hr or newboxBull4hr or newboxBull8hr or newboxBullDaily or newboxBullWeekly or newboxBullMonthly
alertcondition(bull_fvg_creation_alert,title='Bull FVG Creation',message = 'Bull FVG Creation' )
bear_fvg_creation_alert = newboxBear or newboxBear5 or newboxBear10 or newboxBear15 or newboxBear1hr or newboxBear4hr or newboxBear8hr or newboxBearDaily or newboxBearWeekly or newboxBearMonthly          
alertcondition(bear_fvg_creation_alert,title='Bear FVG Creation',message = 'Bear FVG Creation' )
both_fvg_creation_alert = newboxBull or newboxBull5 or newboxBull10 or newboxBull15 or newboxBull1hr or newboxBull4hr or newboxBull8hr or newboxBullDaily or newboxBullWeekly or newboxBullMonthly or newboxBear or newboxBear5 or newboxBear10 or newboxBear15 or newboxBear1hr or newboxBear4hr or newboxBear8hr or newboxBearDaily or newboxBearWeekly or newboxBearMonthly        
alertcondition(both_fvg_creation_alert,title='Bull or Bear FVG Creation',message = 'Bull or Bear FVG Creation' )

//if ta.change(time("1")) != 0
//if barstate.islast
    // label zzlabel11 = na
    // label zzlabel12 = na
if enable_5min 
    f_updateBox(fvgboxBear5)
    f_updateBox(fvgboxBull5)
if enable_10min 
    f_updateBox(fvgboxBear10)
    f_updateBox(fvgboxBull10)
if enable_15min 
    f_updateBox(fvgboxBear15)
    f_updateBox(fvgboxBull15)
if enable_30min
    f_updateBox(fvgboxBear30)
    f_updateBox(fvgboxBull30)
if enable_1hr
    f_updateBox(fvgboxBear1hr)
    f_updateBox(fvgboxBull1hr)
if enable_4hr
    f_updateBox(fvgboxBear4hr)
    f_updateBox(fvgboxBull4hr)
if enable_8hr
    f_updateBox(fvgboxBear8hr)
    f_updateBox(fvgboxBull8hr)
if enable_Daily
    f_updateBox(fvgboxBearDaily)
    f_updateBox(fvgboxBullDaily)
if enable_Week
    f_updateBox(fvgboxBearWeekly)
    f_updateBox(fvgboxBullWeekly)
if enable_Month
    f_updateBox(fvgboxBearMonthly)
    f_updateBox(fvgboxBullMonthly)

// label.delete(zzlabel11[1])
// label.delete(zzlabel12[1])
// zzlabel11 := label.new(bar_index + 5, high, str.tostring(array.size(fvgboxBearDaily)), color = color.rgb(0, 0, 0, 100), textcolor = color.rgb(255, 42, 0))
// zzlabel12 := label.new(bar_index + 5, low, str.tostring(array.size(fvgboxBearDaily)), color = color.rgb(0, 0, 0, 100), textcolor = color.rgb(4, 255, 0))


    
